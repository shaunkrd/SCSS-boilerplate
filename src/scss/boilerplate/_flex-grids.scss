// Default grid is:
// - 1 column up until $breakpoint-multi-column screen size
// - 2 columns from $breakpoint-multi-column upwards
//
// There is also an option for the grid to break into 3 columns after the boilerplate $breakpoint-grid-3cols variable screen size
// For that apply the class 'grid-max-3cols' to the grid
// This grid is:
// - 1 column up until $breakpoint-multi-column screen size
// - 2 columns up until $breakpoint-grid-3cols screen size
// - 3 columns from $breakpoint-grid-3cols upwards
// 
// Handling of final row in grid:
// Default handling is:
// If the last grid element sits by itself in a row then it is set to 100% width to fill the gap
// This applies to both the max 2 column and the max 3 column layout
//
// This gap filling can be prevented by adding the class 'grid' to the grid


.flex-grid {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	padding-top: 1em;
	justify-content: space-between;
	> div {
		border: 1px solid $keyline;
		padding: $grid-padding;
		margin-bottom: $grid-gutter-vertical;
		text-align: center;
	}
	&.grid-elements-no-padding {
		> div {
			padding: 0;	
		}
	}
	&.grid-elements-no-margins {
		justify-content: center;
		> div {
			margin-bottom: 0;		
		}
	}
	// 2 column breakpoint
	@include break-at($breakpoint-grid-2cols) {
		> div {
			width: 50% - ($grid-gutter-perc / 2);
			&:last-child:nth-child(odd) {
				margin-left: auto;
				margin-right: auto;
			}
		}
		&.grid-final-row-gaps-filled {
			> div {
				&:last-child:nth-child(odd) {
					width: 100%;
				}				
			}
		}
		&.grid-elements-no-margins {
			> div {
				width: 50%;
			}	
		}	
	}
	// 3 column breakpoint
	@include break-at($breakpoint-grid-3cols) {
		&.grid-max-3cols {
			> div, > div:last-child { // Also need to explicitly set for the :last-child to overwrite anything set above for smaller screen sizes
				width: (100% - ($grid-gutter-perc * 2)) / 3;
				&:nth-child(odd) {
					margin-left: 0;
					margin-right: 0;	
				}
			}
			// Overwrite any treatment of last child if 3rd in the row applied above (reset left and right margins to 0)
			> div:last-child:nth-child(3n+3) {
				margin-left: 0;
				margin-right: 0;
			}
		}
		&.grid-max-3cols.grid-elements-no-margins {
			> div, > div:last-child {
				width: 33.33333%;
			}	
		}		
		&.grid-max-3cols:not(.grid-elements-no-margins) {
			// If the final element in the grid is alone in the final row
			> div:last-child:nth-child(3n+1) {
				margin-left: auto;
				margin-right: auto;
			}
			// If the final element in the grid is 1 of 2 in the final row
				// 2nd last element
				> div:nth-last-child(2):nth-child(3n+1) {
					margin-left: auto;
					margin-right: $grid-gutter-perc / 2;
				}
				// Last element
				> div:last-child:nth-child(3n+2) {
					margin-left: $grid-gutter-perc / 2;
					margin-right: auto;
				}
		}
		&.grid-max-3cols.grid-final-row-gaps-filled {
			// If the final element in the grid is alone in the final row
			> div:last-child:nth-child(3n+1) {
				width: 100%;
			}
			// If the final element in the grid is 1 of 2 in the final row
			> div:nth-last-child(2):nth-child(3n+1), > div:last-child:nth-child(3n+2) {
				width: 50%;
			}
			&:not(.grid-elements-no-margins) {
				> div:nth-last-child(2):nth-child(3n+1), > div:last-child:nth-child(3n+2) {
					width: 50% - ($grid-gutter-perc / 2);
				}		
			}
		}
	
	}
}